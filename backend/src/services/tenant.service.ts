// ─────────────────────────────────────────────
// File: backend/src/services/tenant.service.ts
// Purpose: Create tenant + default “TENANT_ADMIN” role + admin user
// ─────────────────────────────────────────────

import { randomBytes } from "crypto";
import bcrypt from "bcrypt";
import { prisma } from "../config/db";

/**
 * Generate a strong random password when none is provided
 */
function generateRandomPassword(): string {
  return randomBytes(6).toString("base64url"); // e.g. “A3x7L_cH”
}

/**
 * Create a new tenant (company) and its first admin.
 * Returns the tenant, the admin user, and the plaintext password (if autogenerated)
 */
export async function createTenantWithAdmin(params: {
  name: string;
  slug: string;
  adminEmail: string;
  adminPassword?: string; // optional, will be generated if absent
}) {
  const {
    name,
    slug,
    adminEmail,
    adminPassword = generateRandomPassword(),
  } = params;

  const hashed = await bcrypt.hash(adminPassword, 10);

  // Fetch all permissions so the tenant admin has full access
  const allPermissions = await prisma.permission.findMany();

  return prisma.$transaction(async (tx: { tenant: { create: (arg0: { data: { name: string; slug: string; }; }) => any; }; role: { create: (arg0: { data: { name: string; tenantId: any; permissions: { create: any; }; }; }) => any; }; user: { create: (arg0: { data: { email: string; password: string; mustChangePassword: boolean; tenantId: any; roles: { create: { roleId: any; }; }; }; }) => any; }; }) => {
    // 1. Create tenant
    const tenant = await tx.tenant.create({
      data: { name, slug },
    });

    // 2. Create “TENANT_ADMIN” role with all permissions
    const tenantAdminRole = await tx.role.create({
      data: {
        name: "TENANT_ADMIN",
        tenantId: tenant.id,
        permissions: {
          create: allPermissions.map((perm: { id: any; }) => ({
            permission: { connect: { id: perm.id } },
          })),
        },
      },
    });

    // 3. Create admin user linked to that role
    const adminUser = await tx.user.create({
      data: {
        email: adminEmail,
        password: hashed,
        mustChangePassword: true,
        tenantId: tenant.id,
        roles: {
          create: {
            roleId: tenantAdminRole.id,
          },
        },
      },
    });

    return {
      tenant,
      adminUser,
      plainPassword: adminPassword, // show once to superadmin
    };
  });
}
